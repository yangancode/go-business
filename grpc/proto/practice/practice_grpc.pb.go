// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package practice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PracticeClient is the client API for Practice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PracticeClient interface {
	// 服务端推送
	MsgNotice(ctx context.Context, in *MsgNoticeRequest, opts ...grpc.CallOption) (Practice_MsgNoticeClient, error)
	// 上传文件
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (Practice_UploadFileClient, error)
	// 简易聊天
	SimpleChat(ctx context.Context, opts ...grpc.CallOption) (Practice_SimpleChatClient, error)
}

type practiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPracticeClient(cc grpc.ClientConnInterface) PracticeClient {
	return &practiceClient{cc}
}

func (c *practiceClient) MsgNotice(ctx context.Context, in *MsgNoticeRequest, opts ...grpc.CallOption) (Practice_MsgNoticeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Practice_ServiceDesc.Streams[0], "/practice.srv.Practice/MsgNotice", opts...)
	if err != nil {
		return nil, err
	}
	x := &practiceMsgNoticeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Practice_MsgNoticeClient interface {
	Recv() (*MsgNoticeResponse, error)
	grpc.ClientStream
}

type practiceMsgNoticeClient struct {
	grpc.ClientStream
}

func (x *practiceMsgNoticeClient) Recv() (*MsgNoticeResponse, error) {
	m := new(MsgNoticeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *practiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (Practice_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Practice_ServiceDesc.Streams[1], "/practice.srv.Practice/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &practiceUploadFileClient{stream}
	return x, nil
}

type Practice_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type practiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *practiceUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *practiceUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *practiceClient) SimpleChat(ctx context.Context, opts ...grpc.CallOption) (Practice_SimpleChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Practice_ServiceDesc.Streams[2], "/practice.srv.Practice/SimpleChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &practiceSimpleChatClient{stream}
	return x, nil
}

type Practice_SimpleChatClient interface {
	Send(*ChatMsg) error
	Recv() (*ChatMsg, error)
	grpc.ClientStream
}

type practiceSimpleChatClient struct {
	grpc.ClientStream
}

func (x *practiceSimpleChatClient) Send(m *ChatMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *practiceSimpleChatClient) Recv() (*ChatMsg, error) {
	m := new(ChatMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PracticeServer is the server API for Practice service.
// All implementations must embed UnimplementedPracticeServer
// for forward compatibility
type PracticeServer interface {
	// 服务端推送
	MsgNotice(*MsgNoticeRequest, Practice_MsgNoticeServer) error
	// 上传文件
	UploadFile(Practice_UploadFileServer) error
	// 简易聊天
	SimpleChat(Practice_SimpleChatServer) error
	mustEmbedUnimplementedPracticeServer()
}

// UnimplementedPracticeServer must be embedded to have forward compatible implementations.
type UnimplementedPracticeServer struct {
}

func (UnimplementedPracticeServer) MsgNotice(*MsgNoticeRequest, Practice_MsgNoticeServer) error {
	return status.Errorf(codes.Unimplemented, "method MsgNotice not implemented")
}
func (UnimplementedPracticeServer) UploadFile(Practice_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedPracticeServer) SimpleChat(Practice_SimpleChatServer) error {
	return status.Errorf(codes.Unimplemented, "method SimpleChat not implemented")
}
func (UnimplementedPracticeServer) mustEmbedUnimplementedPracticeServer() {}

// UnsafePracticeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PracticeServer will
// result in compilation errors.
type UnsafePracticeServer interface {
	mustEmbedUnimplementedPracticeServer()
}

func RegisterPracticeServer(s grpc.ServiceRegistrar, srv PracticeServer) {
	s.RegisterService(&Practice_ServiceDesc, srv)
}

func _Practice_MsgNotice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MsgNoticeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PracticeServer).MsgNotice(m, &practiceMsgNoticeServer{stream})
}

type Practice_MsgNoticeServer interface {
	Send(*MsgNoticeResponse) error
	grpc.ServerStream
}

type practiceMsgNoticeServer struct {
	grpc.ServerStream
}

func (x *practiceMsgNoticeServer) Send(m *MsgNoticeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Practice_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PracticeServer).UploadFile(&practiceUploadFileServer{stream})
}

type Practice_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type practiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *practiceUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *practiceUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Practice_SimpleChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PracticeServer).SimpleChat(&practiceSimpleChatServer{stream})
}

type Practice_SimpleChatServer interface {
	Send(*ChatMsg) error
	Recv() (*ChatMsg, error)
	grpc.ServerStream
}

type practiceSimpleChatServer struct {
	grpc.ServerStream
}

func (x *practiceSimpleChatServer) Send(m *ChatMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *practiceSimpleChatServer) Recv() (*ChatMsg, error) {
	m := new(ChatMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Practice_ServiceDesc is the grpc.ServiceDesc for Practice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Practice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "practice.srv.Practice",
	HandlerType: (*PracticeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MsgNotice",
			Handler:       _Practice_MsgNotice_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadFile",
			Handler:       _Practice_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SimpleChat",
			Handler:       _Practice_SimpleChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/practice/practice.proto",
}
